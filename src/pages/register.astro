---
import Layout from "@layouts/Layout.astro";
---

<Layout title="Registrarse">
  <section class="m-auto flex w-fit flex-col text-center">
    <h1 class="mb-12 text-5xl font-bold">Registrarse</h1>
    <form
      id="register-form"
      class="flex flex-col gap-4"
      action="/api/auth/register"
      method="post"
    >
      <div class="flex flex-col">
        <label for="email">Correo electrónico</label>
        <input
          type="email"
          name="email"
          id="email"
          autocomplete="email"
          required
          aria-describedby="Correo electrónico"
        />
        <small id="email-error" class="text-error max-w-[250px] text-balance"
        ></small>
      </div>

      <div class="relative flex flex-col">
        <label for="password">Contraseña</label>
        <input
          type="password"
          name="password"
          id="password"
          autocomplete="current-password"
          required
          minlength="6"
          aria-describedby="Contraseña"
        />
        <button
          type="button"
          id="toggle-password"
          class="absolute top-8 right-2 h-5 w-5 hover:scale-110 hover:cursor-pointer"
          aria-label="Mostrar contraseña"
        >
          <svg
            id="eye-open"
            width="20"
            height="20"
            fill="none"
            stroke="currentColor"
          >
            <use xlink:href="src/assets/eye-password.svg#opened"></use>
          </svg>
          <svg
            id="eye-closed"
            class="hidden"
            width="20"
            height="20"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <use xlink:href="src/assets/eye-password.svg#closed"></use>
          </svg>
        </button>

        <small id="password-error" class="text-error max-w-[250px] text-balance"
        ></small>
      </div>

      <button
        id="submit-btn"
        type="submit"
        class="mt-2 rounded-sm border-1 border-b-cyan-100 bg-cyan-700 py-1 enabled:hover:cursor-pointer enabled:hover:bg-cyan-800 disabled:opacity-60"
        disabled>Registrarse</button
      >
    </form>
    <p class="mt-12">
      ¿Ya tienes una cuenta? <br />
      <a class="hover:underline" href="/signin">Iniciar sesión</a>
    </p>
  </section>
</Layout>

<script>
  import { $ } from "@lib/dom-selector";

  const form = $("#register-form") as HTMLFormElement;
  const emailError = $("#email-error") as HTMLElement;
  const passwordError = $("#password-error") as HTMLElement;

  const emailInput = $("#email") as HTMLInputElement;
  const passwordInput = $("#password") as HTMLInputElement;
  const togglePassword = $("#toggle-password") as HTMLButtonElement;
  const eyeOpen = $("#eye-open") as HTMLElement;
  const eyeClosed = $("#eye-closed") as HTMLElement;
  const submitBtn = $("#submit-btn") as HTMLButtonElement;

  // EVENTS
  emailInput.addEventListener("input", validate);
  passwordInput.addEventListener("input", validate);
  // Toggle password icon
  togglePassword.addEventListener("click", () => {
    if (passwordInput.type === "password") {
      passwordInput.type = "text";
      eyeOpen.classList.add("hidden");
      eyeClosed.classList.remove("hidden");
    } else {
      passwordInput.type = "password";
      eyeOpen.classList.remove("hidden");
      eyeClosed.classList.add("hidden");
    }
  });

  // Submit
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    submitBtn.disabled = true;

    try {
      const formData = new FormData(form);
      const response = await fetch(form.action, {
        method: form.method,
        body: formData,
      });

      console.log(response);

      if (!response.ok) {
        const errorData = await response.json();
        emailError.textContent = errorData.message;
        passwordError.textContent = "";
      } else {
        window.location.href = "/signin";
      }
    } catch (err) {
      emailError.textContent = "Error al conectar con el servidor";
    } finally {
      submitBtn.disabled = false;
    }
  });

  // FUNCTIONS
  function validate() {
    const emailValid = emailInput.checkValidity() ?? false;
    const passwordValid = isValidPassword(passwordInput.value);

    emailError.textContent =
      emailValid || !emailInput.value ? "" : "Introduce un email válido";
    passwordError.textContent =
      passwordValid || !passwordInput.value
        ? ""
        : "Mínimo 6 caracteres, incluyendo mayúsculas, minúsculas y números";

    submitBtn.disabled = !(emailValid && passwordValid);
  }

  function isValidPassword(password: string) {
    const hasLowercase = /[a-z]/.test(password);
    const hasUppercase = /[A-Z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    const hasMinLength = password.length >= 6;

    return hasLowercase && hasUppercase && hasNumber && hasMinLength;
  }
</script>
